["^ ","~:rename-macros",["^ "],"~:renames",["^ "],"~:use-macros",["^ "],"~:excludes",["~#set",[]],"~:name","~$untangled.client.mutations","~:imports",null,"~:requires",["^ ","~$om","~$om.next","^:","^:"],"~:uses",null,"~:defs",["^ ","~$mutate",["^ ","^5","~$untangled.client.mutations/mutate","~:file","resources/public/js/cards/untangled/client/mutations.cljs","~:line",5,"~:column",1,"~:end-line",5,"~:end-column",17,"~:meta",["^ ","^?","/Users/Nicole/projects/untangled-template-workspace/resources/public/js/cards/untangled/client/mutations.cljs","^@",5,"^A",11,"^B",5,"^C",17]],"~$post-mutate",["^ ","^5","~$untangled.client.mutations/post-mutate","^?","resources/public/js/cards/untangled/client/mutations.cljs","^@",8,"^A",1,"^B",8,"^C",22,"^D",["^ ","^?","/Users/Nicole/projects/untangled-template-workspace/resources/public/js/cards/untangled/client/mutations.cljs","^@",8,"^A",11,"^B",8,"^C",22]],"~$toggle!",["^ ","~:protocol-inline",null,"^D",["^ ","^?","/Users/Nicole/projects/untangled-template-workspace/resources/public/js/cards/untangled/client/mutations.cljs","^@",14,"^A",7,"^B",14,"^C",14,"~:arglists",["~#list",["~$quote",["^J",[["~$comp","~$field"]]]]],"~:doc","Toggle the given boolean `field` on the specified component. It is recommended you use this function only on\n  UI-related data (e.g. form checkbox checked status) and write clear top-level transactions for anything more complicated."],"^5","~$untangled.client.mutations/toggle!","~:variadic",false,"^?","resources/public/js/cards/untangled/client/mutations.cljs","^C",14,"~:method-params",["^J",[["^L","^M"]]],"~:protocol-impl",null,"~:arglists-meta",["^J",[null,null]],"^A",1,"^@",14,"^B",14,"~:max-fixed-arity",2,"~:fn-var",true,"^I",["^J",["^K",["^J",[["^L","^M"]]]]],"^N","Toggle the given boolean `field` on the specified component. It is recommended you use this function only on\n  UI-related data (e.g. form checkbox checked status) and write clear top-level transactions for anything more complicated."],"~$set-value!",["^ ","^H",null,"^D",["^ ","^?","/Users/Nicole/projects/untangled-template-workspace/resources/public/js/cards/untangled/client/mutations.cljs","^@",20,"^A",7,"^B",20,"^C",17,"^I",["^J",["^K",["^J",[["~$component","^M","~$value"]]]]],"^N","Set a raw value on the given `field` of a `component`. It is recommended you use this function only on\n  UI-related data (e.g. form inputs that are used by the UI, and not persisted data)."],"^5","~$untangled.client.mutations/set-value!","^P",false,"^?","resources/public/js/cards/untangled/client/mutations.cljs","^C",17,"^Q",["^J",[["^W","^M","^X"]]],"^R",null,"^S",["^J",[null,null]],"^A",1,"^@",20,"^B",20,"^T",3,"^U",true,"^I",["^J",["^K",["^J",[["^W","^M","^X"]]]]],"^N","Set a raw value on the given `field` of a `component`. It is recommended you use this function only on\n  UI-related data (e.g. form inputs that are used by the UI, and not persisted data)."],"~$ensure-integer",["^ ","^H",null,"^D",["^ ","^?","/Users/Nicole/projects/untangled-template-workspace/resources/public/js/cards/untangled/client/mutations.cljs","^@",26,"^A",8,"^B",26,"^C",22,"~:private",true,"^I",["^J",["^K",["^J",[["~$v"]]]]],"^N","Helper for set-integer!, use that instead. It is recommended you use this function only on UI-related\n  data (e.g. data that is used for display purposes) and write clear top-level transactions for anything else."],"^[",true,"^5","~$untangled.client.mutations/ensure-integer","^P",false,"^?","resources/public/js/cards/untangled/client/mutations.cljs","^C",22,"^Q",["^J",[["~$v"]]],"^R",null,"^S",["^J",[null,null]],"^A",1,"^@",26,"^B",26,"^T",1,"^U",true,"^I",["^J",["^K",["^J",[["~$v"]]]]],"^N","Helper for set-integer!, use that instead. It is recommended you use this function only on UI-related\n  data (e.g. data that is used for display purposes) and write clear top-level transactions for anything else."],"~$set-integer!",["^ ","^H",null,"^D",["^ ","^?","/Users/Nicole/projects/untangled-template-workspace/resources/public/js/cards/untangled/client/mutations.cljs","^@",33,"^A",7,"^B",33,"^C",19,"^I",["^J",["^K",["^J",[["^W","^M","~$&",["^ ","~:keys",["~$event","^X"]]]]]]],"^N","Set the given integer on the given `field` of a `component`. Allows same parameters as `set-string!`.\n\n   It is recommended you use this function only on UI-related data (e.g. data that is used for display purposes)\n   and write clear top-level transactions for anything else.","~:top-fn",["^ ","^P",true,"^T",2,"^Q",[["^J",["^W","^M",["^ ","^12",["^13","^X"]]]]],"^I",["^J",[["^W","^M","~$&",["^ ","^12",["^13","^X"]]]]],"^S",["^J",[null]]]],"^5","~$untangled.client.mutations/set-integer!","^P",true,"^?","resources/public/js/cards/untangled/client/mutations.cljs","^C",19,"^14",["^ ","^P",true,"^T",2,"^Q",[["^J",["^W","^M",["^ ","^12",["^13","^X"]]]]],"^I",["^J",[["^W","^M","~$&",["^ ","^12",["^13","^X"]]]]],"^S",["^J",[null]]],"^Q",[["^J",["^W","^M",["^ ","^12",["^13","^X"]]]]],"^R",null,"^S",["^J",[null]],"^A",1,"^@",33,"^B",33,"^T",2,"^U",true,"^I",["^J",[["^W","^M","~$&",["^ ","^12",["^13","^X"]]]]],"^N","Set the given integer on the given `field` of a `component`. Allows same parameters as `set-string!`.\n\n   It is recommended you use this function only on UI-related data (e.g. data that is used for display purposes)\n   and write clear top-level transactions for anything else."],"~$set-string!",["^ ","^H",null,"^D",["^ ","^?","/Users/Nicole/projects/untangled-template-workspace/resources/public/js/cards/untangled/client/mutations.cljs","^@",43,"^A",7,"^B",43,"^C",18,"^I",["^J",["^K",["^J",[["^W","^M","~$&",["^ ","^12",["^13","^X"]]]]]]],"^N","Set a string on the given `field` of a `component`. The string can be literal via named parameter `:value` or\n  can be auto-extracted from a UI event using the named parameter `:event`\n\n  Examples\n\n  ```\n  (set-string! this :ui/name :value \"Hello\") ; set from literal (or var)\n  (set-string! this :ui/name :event evt) ; extract from UI event target value\n  ```\n\n  It is recommended you use this function only on UI-related\n  data (e.g. data that is used for display purposes) and write clear top-level transactions for anything else.","^14",["^ ","^P",true,"^T",2,"^Q",[["^J",["^W","^M",["^ ","^12",["^13","^X"]]]]],"^I",["^J",[["^W","^M","~$&",["^ ","^12",["^13","^X"]]]]],"^S",["^J",[null]]]],"^5","~$untangled.client.mutations/set-string!","^P",true,"^?","resources/public/js/cards/untangled/client/mutations.cljs","^C",18,"^14",["^ ","^P",true,"^T",2,"^Q",[["^J",["^W","^M",["^ ","^12",["^13","^X"]]]]],"^I",["^J",[["^W","^M","~$&",["^ ","^12",["^13","^X"]]]]],"^S",["^J",[null]]],"^Q",[["^J",["^W","^M",["^ ","^12",["^13","^X"]]]]],"^R",null,"^S",["^J",[null]],"^A",1,"^@",43,"^B",43,"^T",2,"^U",true,"^I",["^J",[["^W","^M","~$&",["^ ","^12",["^13","^X"]]]]],"^N","Set a string on the given `field` of a `component`. The string can be literal via named parameter `:value` or\n  can be auto-extracted from a UI event using the named parameter `:event`\n\n  Examples\n\n  ```\n  (set-string! this :ui/name :value \"Hello\") ; set from literal (or var)\n  (set-string! this :ui/name :event evt) ; extract from UI event target value\n  ```\n\n  It is recommended you use this function only on UI-related\n  data (e.g. data that is used for display purposes) and write clear top-level transactions for anything else."]],"~:require-macros",["^ ","^9","^:","^:","^:"],"~:cljs.analyzer/constants",["^ ","~:seen",["^4",["~:default","~$ui/toggle","~:value","~:field","~:event","~:hierarchy","~$ui/set-props"]],"~:order",["^1@","^1;","^1<","^1>","^1A","^1?","^1="]],"^N",null]