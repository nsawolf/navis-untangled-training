["^ ","~:rename-macros",["^ "],"~:renames",["^ "],"~:use-macros",["^ "],"~:excludes",["~#set",[]],"~:name","~$untangled.client.core","~:imports",["^ ","~$Uri","~$goog.Uri"],"~:requires",["^ ","~$set","~$clojure.set","~$goog.dom","^=","^8","^9","~$log","~$untangled.client.logging","~$om.next.cache","^@","~$untangled.client.impl.network","^A","~$plumbing","~$untangled.client.impl.om-plumbing","~$async","~$cljs.core.async","~$untangled.client.impl.util","^F","~$omp","~$om.next.protocols","~$untangled.client.impl.application","^I","^E","^E","~$udom","~$untangled.dom","^<","^<","~$util","^F","^H","^H","~$gdom","^=","~$net","^A","^?","^?","~$om","~$om.next","~$omc","^@","~$untangled.client.impl.built-in-mutations","^R","^C","^C","^P","^P","^K","^K","~$app","^I"],"~:uses",null,"~:defs",["^ ","~$reset-history-impl",["^ ","~:protocol-inline",null,"~:meta",["^ ","~:file","/Users/Nicole/projects/untangled-template-workspace/resources/public/js/cards/untangled/client/core.cljs","~:line",146,"~:column",7,"~:end-line",146,"~:end-column",25,"~:arglists",["~#list",["~$quote",["^13",[["^S"]]]]],"~:doc","Needed for mocking in tests. Use UntangledApplication protocol methods instead."],"^5","~$untangled.client.core/reset-history-impl","~:variadic",false,"^Y","resources/public/js/cards/untangled/client/core.cljs","^11",25,"~:method-params",["^13",[["^S"]]],"~:protocol-impl",null,"~:arglists-meta",["^13",[null,null]],"^[",1,"^Z",146,"^10",146,"~:max-fixed-arity",1,"~:fn-var",true,"^12",["^13",["^14",["^13",[["^S"]]]]],"^15","Needed for mocking in tests. Use UntangledApplication protocol methods instead."],"~$uri-params",["^ ","^W",null,"^X",["^ ","^Y","/Users/Nicole/projects/untangled-template-workspace/resources/public/js/cards/untangled/client/core.cljs","^Z",219,"^[",7,"^10",219,"^11",17,"^12",["^13",["^14",["^13",[[],["~$url"]]]]],"^15","Get the current URI parameters from the browser url or one you supply","~:top-fn",["^ ","^17",false,"^1;",1,"^18",["^13",[[],["^1>"]]],"^12",["^13",[[],["^1>"]]],"^1:",["^13",[null,null]]]],"^5","~$untangled.client.core/uri-params","^17",false,"^Y","resources/public/js/cards/untangled/client/core.cljs","^11",17,"^1?",["^ ","^17",false,"^1;",1,"^18",["^13",[[],["^1>"]]],"^12",["^13",[[],["^1>"]]],"^1:",["^13",[null,null]]],"^18",["^13",[[],["^1>"]]],"^19",null,"^1:",["^13",[null,null]],"^[",1,"^Z",219,"^10",219,"^1;",1,"^1<",true,"^12",["^13",[[],["^1>"]]],"^15","Get the current URI parameters from the browser url or one you supply"],"~$merge-alternate-union-elements!",["^ ","^W",null,"^X",["^ ","^Y","/Users/Nicole/projects/untangled-template-workspace/resources/public/js/cards/untangled/client/core.cljs","^Z",89,"^[",8,"^10",89,"^11",39,"~:private",true,"^12",["^13",["^14",["^13",[["^S","~$root-component"]]]]]],"^1B",true,"^5","~$untangled.client.core/merge-alternate-union-elements!","^17",false,"^Y","resources/public/js/cards/untangled/client/core.cljs","^11",39,"^18",["^13",[["^S","^1C"]]],"^19",null,"^1:",["^13",[null,null]],"^[",1,"^Z",89,"^10",89,"^1;",2,"^1<",true,"^12",["^13",["^14",["^13",[["^S","^1C"]]]]]],"~$mount",["^ ","^W",null,"^X",["^ ","^Y","/Users/Nicole/projects/untangled-template-workspace/resources/public/js/cards/untangled/client/core.cljs","^Z",81,"^[",4,"^10",81,"^11",9,"~:protocol","~$untangled.client.core/UntangledApplication","^15","Start/replace the webapp on the given DOM ID or DOM Node.","^12",["^13",["^14",["^13",[["~$this","^1C","~$target-dom-id"]]]]]],"^1F","^1G","^5","~$untangled.client.core/mount","^17",false,"^Y","resources/public/js/cards/untangled/client/core.cljs","^11",9,"^18",["^13",[["^1H","^1C","^1I"]]],"^19",null,"^1:",["^13",[null,null]],"^[",1,"^Z",80,"^10",81,"^1;",3,"^1<",true,"^12",["^13",["^14",["^13",[["^1H","^1C","^1I"]]]]],"^15","Start/replace the webapp on the given DOM ID or DOM Node."],"~$initial-state",["^ ","^W",null,"^X",["^ ","^Y","/Users/Nicole/projects/untangled-template-workspace/resources/public/js/cards/untangled/client/core.cljs","^Z",78,"^[",4,"^10",78,"^11",17,"^1F","~$untangled.client.core/InitialAppState","^15","Get the initial state to be used for this component in app state. You are responsible for composing these together.","^12",["^13",["^14",["^13",[["~$clz","~$params"]]]]]],"^1F","^1L","^5","~$untangled.client.core/initial-state","^17",false,"^Y","resources/public/js/cards/untangled/client/core.cljs","^11",17,"^18",["^13",[["^1M","^1N"]]],"^19",null,"^1:",["^13",[null,null]],"^[",1,"^Z",77,"^10",78,"^1;",2,"^1<",true,"^12",["^13",["^14",["^13",[["^1M","^1N"]]]]],"^15","Get the initial state to be used for this component in app state. You are responsible for composing these together."],"~$merge-state!",["^ ","^W",null,"^X",["^ ","^Y","/Users/Nicole/projects/untangled-template-workspace/resources/public/js/cards/untangled/client/core.cljs","^Z",307,"^[",7,"^10",307,"^11",19,"^12",["^13",["^14",["^13",[["~$app-or-reconciler","~$component","~$object-data","~$&","~$named-parameters"]]]]],"^15","Normalize and merge a (sub)tree of application state into the application using a known UI component's query and ident.\n\n  This utility function obtains the ident of the incoming object-data using the UI component's ident function. Once obtained,\n  it uses the component's query and ident to normalize the data and place the resulting objects in the correct tables.\n  It is also quite common to want those new objects to be linked into lists in other spot in app state, so this function\n  supports optional named parameters for doing this. These named parameters can be repeated as many times as you like in order\n  to place the ident of the new object into other data structures of app state.\n\n  This function honors the data merge story for Untangled: attributes that are queried for but do not appear in the\n  data will be removed from the application. This function also uses the initial state for the component as a base\n  for merge if there was no state for the object already in the database.\n\n  This function will also trigger re-renders of components that directly render object merged, as well as any components\n  into which you integrate that data via the named-parameters.\n\n  This function is primarily meant to be used from things like server push and setTimeout/setInterval, where you're outside\n  of the normal mutation story. Do not use this function within abstract mutations.\n\n  - app-or-reconciler: The Untangled application or Om reconciler\n  - component: The class of the component that corresponsds to the data. Must have an ident.\n  - object-data: A map (tree) of data to merge. Will be normalized for you.\n  - named-parameter: Post-processing ident integration steps. see integrate-ident!\n\n  Any keywords that appear in ident integration steps will be added to the re-render queue.\n  ","^1?",["^ ","^17",true,"^1;",3,"^18",[["^13",["^1Q","^1R","^1S","^1T"]]],"^12",["^13",[["^1Q","^1R","^1S","~$&","^1T"]]],"^1:",["^13",[null]]]],"^5","~$untangled.client.core/merge-state!","^17",true,"^Y","resources/public/js/cards/untangled/client/core.cljs","^11",19,"^1?",["^ ","^17",true,"^1;",3,"^18",[["^13",["^1Q","^1R","^1S","^1T"]]],"^12",["^13",[["^1Q","^1R","^1S","~$&","^1T"]]],"^1:",["^13",[null]]],"^18",[["^13",["^1Q","^1R","^1S","^1T"]]],"^19",null,"^1:",["^13",[null]],"^[",1,"^Z",307,"^10",307,"^1;",3,"^1<",true,"^12",["^13",[["^1Q","^1R","^1S","~$&","^1T"]]],"^15","Normalize and merge a (sub)tree of application state into the application using a known UI component's query and ident.\n\n  This utility function obtains the ident of the incoming object-data using the UI component's ident function. Once obtained,\n  it uses the component's query and ident to normalize the data and place the resulting objects in the correct tables.\n  It is also quite common to want those new objects to be linked into lists in other spot in app state, so this function\n  supports optional named parameters for doing this. These named parameters can be repeated as many times as you like in order\n  to place the ident of the new object into other data structures of app state.\n\n  This function honors the data merge story for Untangled: attributes that are queried for but do not appear in the\n  data will be removed from the application. This function also uses the initial state for the component as a base\n  for merge if there was no state for the object already in the database.\n\n  This function will also trigger re-renders of components that directly render object merged, as well as any components\n  into which you integrate that data via the named-parameters.\n\n  This function is primarily meant to be used from things like server push and setTimeout/setInterval, where you're outside\n  of the normal mutation story. Do not use this function within abstract mutations.\n\n  - app-or-reconciler: The Untangled application or Om reconciler\n  - component: The class of the component that corresponsds to the data. Must have an ident.\n  - object-data: A map (tree) of data to merge. Will be normalized for you.\n  - named-parameter: Post-processing ident integration steps. see integrate-ident!\n\n  Any keywords that appear in ident integration steps will be added to the re-render queue.\n  "],"~$get-class-ident",["^ ","^W",null,"^X",["^ ","^Y","/Users/Nicole/projects/untangled-template-workspace/resources/public/js/cards/untangled/client/core.cljs","^Z",234,"^[",7,"^10",234,"^11",22,"^12",["^13",["^14",["^13",[["~$comp","~$data"]]]]],"^15","Get the ident using a component class and data. Om's simulated statics are elided by\n  advanced compilation. This function compensates."],"^5","~$untangled.client.core/get-class-ident","^17",false,"^Y","resources/public/js/cards/untangled/client/core.cljs","^11",22,"^18",["^13",[["^1W","^1X"]]],"^19",null,"^1:",["^13",[null,null]],"^[",1,"^Z",234,"^10",234,"^1;",2,"^1<",true,"^12",["^13",["^14",["^13",[["^1W","^1X"]]]]],"^15","Get the ident using a component class and data. Om's simulated statics are elided by\n  advanced compilation. This function compensates."],"~$get-url-param",["^ ","^W",null,"^X",["^ ","^Y","/Users/Nicole/projects/untangled-template-workspace/resources/public/js/cards/untangled/client/core.cljs","^Z",228,"^[",7,"^10",228,"^11",20,"^12",["^13",["^14",["^13",[["~$param-name"],["^1>","^1["]]]]],"^15","Get the value of the named parameter from the browser URL (or an explicit one)","^1?",["^ ","^17",false,"^1;",2,"^18",["^13",[["^1["],["^1>","^1["]]],"^12",["^13",[["^1["],["^1>","^1["]]],"^1:",["^13",[null,null]]]],"^5","~$untangled.client.core/get-url-param","^17",false,"^Y","resources/public/js/cards/untangled/client/core.cljs","^11",20,"^1?",["^ ","^17",false,"^1;",2,"^18",["^13",[["^1["],["^1>","^1["]]],"^12",["^13",[["^1["],["^1>","^1["]]],"^1:",["^13",[null,null]]],"^18",["^13",[["^1["],["^1>","^1["]]],"^19",null,"^1:",["^13",[null,null]],"^[",1,"^Z",228,"^10",228,"^1;",2,"^1<",true,"^12",["^13",[["^1["],["^1>","^1["]]],"^15","Get the value of the named parameter from the browser URL (or an explicit one)"],"~$reset-state!",["^ ","^W",null,"^X",["^ ","^Y","/Users/Nicole/projects/untangled-template-workspace/resources/public/js/cards/untangled/client/core.cljs","^Z",82,"^[",4,"^10",82,"^11",16,"^1F","^1G","^15","Replace the entire app state with the given (pre-normalized) state.","^12",["^13",["^14",["^13",[["^1H","~$new-state"]]]]]],"^1F","^1G","^5","~$untangled.client.core/reset-state!","^17",false,"^Y","resources/public/js/cards/untangled/client/core.cljs","^11",16,"^18",["^13",[["^1H","^22"]]],"^19",null,"^1:",["^13",[null,null]],"^[",1,"^Z",80,"^10",82,"^1;",2,"^1<",true,"^12",["^13",["^14",["^13",[["^1H","^22"]]]]],"^15","Replace the entire app state with the given (pre-normalized) state."],"~$get-url",["^ ","^W",null,"^X",["^ ","^Y","/Users/Nicole/projects/untangled-template-workspace/resources/public/js/cards/untangled/client/core.cljs","^Z",215,"^[",7,"^10",215,"^11",14,"^12",["^13",["^14",["^13",[[]]]]],"^15","Get the current window location from the browser"],"^5","~$untangled.client.core/get-url","^17",false,"^Y","resources/public/js/cards/untangled/client/core.cljs","^11",14,"^18",["^13",[[]]],"^19",null,"^1:",["^13",[null,null]],"^[",1,"^Z",215,"^10",215,"^1;",0,"^1<",true,"^12",["^13",["^14",["^13",[[]]]]],"^15","Get the current window location from the browser"],"~$mount*",["^ ","^W",null,"^X",["^ ","^Y","/Users/Nicole/projects/untangled-template-workspace/resources/public/js/cards/untangled/client/core.cljs","^Z",155,"^[",7,"^10",155,"^11",13,"^12",["^13",["^14",["^13",[[["^ ","~:keys",["~$mounted?","^1K","~$reconciler-options"],"~:as","^S"],"^1C","~$dom-id-or-node"]]]]]],"^5","~$untangled.client.core/mount*","^17",false,"^Y","resources/public/js/cards/untangled/client/core.cljs","^11",13,"^18",["^13",[["~$p__37657","^1C","^2;"]]],"^19",null,"^1:",["^13",[null,null]],"^[",1,"^Z",155,"^10",155,"^1;",3,"^1<",true,"^12",["^13",["^14",["^13",[[["^ ","^27",["^28","^1K","^29"],"^2:","^S"],"^1C","^2;"]]]]]],"~$refresh",["^ ","^W",null,"^X",["^ ","^Y","/Users/Nicole/projects/untangled-template-workspace/resources/public/js/cards/untangled/client/core.cljs","^Z",85,"^[",4,"^10",85,"^11",11,"^1F","^1G","^15","Refresh the UI (force re-render). NOTE: You MUST support :key on your root DOM element with the :ui/react-key value from app state for this to work.","^12",["^13",["^14",["^13",[["^1H"]]]]]],"^1F","^1G","^5","~$untangled.client.core/refresh","^17",false,"^Y","resources/public/js/cards/untangled/client/core.cljs","^11",11,"^18",["^13",[["^1H"]]],"^19",null,"^1:",["^13",[null,null]],"^[",1,"^Z",80,"^10",85,"^1;",1,"^1<",true,"^12",["^13",["^14",["^13",[["^1H"]]]]],"^15","Refresh the UI (force re-render). NOTE: You MUST support :key on your root DOM element with the :ui/react-key value from app state for this to work."],"~$refresh*",["^ ","^W",null,"^X",["^ ","^Y","/Users/Nicole/projects/untangled-template-workspace/resources/public/js/cards/untangled/client/core.cljs","^Z",151,"^[",7,"^10",151,"^11",15,"^12",["^13",["^14",["^13",[[["^ ","^27",["~$reconciler"],"^2:","^S"]]]]]]],"^5","~$untangled.client.core/refresh*","^17",false,"^Y","resources/public/js/cards/untangled/client/core.cljs","^11",15,"^18",["^13",[["~$p__37652"]]],"^19",null,"^1:",["^13",[null,null]],"^[",1,"^Z",151,"^10",151,"^1;",1,"^1<",true,"^12",["^13",["^14",["^13",[[["^ ","^27",["^2A"],"^2:","^S"]]]]]]],"~$integrate-ident!",["^ ","^W",null,"^X",["^ ","^Y","/Users/Nicole/projects/untangled-template-workspace/resources/public/js/cards/untangled/client/core.cljs","^Z",270,"^[",7,"^10",270,"^11",23,"^12",["^13",["^14",["^13",[["~$state","~$ident","~$&","^1T"]]]]],"^15","Integrate an ident into any number of places in the app state. This function is safe to use within mutation\n  implementations as a general helper function.\n\n  The named parameters can be specified any number of times. They are:\n\n  - append:  A vector (path) to a list in your app state where this new object's ident should be appended. Will not append\n  the ident if that ident is already in the list.\n  - prepend: A vector (path) to a list in your app state where this new object's ident should be prepended. Will not append\n  the ident if that ident is already in the list.\n  - replace: A vector (path) to a specific location in app-state where this object's ident should be placed. Can target a to-one or to-many.\n   If the target is a vector element then that element must already exist in the vector.\n  ","^1?",["^ ","^17",true,"^1;",2,"^18",[["^13",["^2E","^2F","^1T"]]],"^12",["^13",[["^2E","^2F","~$&","^1T"]]],"^1:",["^13",[null]]]],"^5","~$untangled.client.core/integrate-ident!","^17",true,"^Y","resources/public/js/cards/untangled/client/core.cljs","^11",23,"^1?",["^ ","^17",true,"^1;",2,"^18",[["^13",["^2E","^2F","^1T"]]],"^12",["^13",[["^2E","^2F","~$&","^1T"]]],"^1:",["^13",[null]]],"^18",[["^13",["^2E","^2F","^1T"]]],"^19",null,"^1:",["^13",[null]],"^[",1,"^Z",270,"^10",270,"^1;",2,"^1<",true,"^12",["^13",[["^2E","^2F","~$&","^1T"]]],"^15","Integrate an ident into any number of places in the app state. This function is safe to use within mutation\n  implementations as a general helper function.\n\n  The named parameters can be specified any number of times. They are:\n\n  - append:  A vector (path) to a list in your app state where this new object's ident should be appended. Will not append\n  the ident if that ident is already in the list.\n  - prepend: A vector (path) to a list in your app state where this new object's ident should be prepended. Will not append\n  the ident if that ident is already in the list.\n  - replace: A vector (path) to a specific location in app-state where this object's ident should be placed. Can target a to-one or to-many.\n   If the target is a vector element then that element must already exist in the vector.\n  "],"~$component-merge-query",["^ ","^W",null,"^X",["^ ","^Y","/Users/Nicole/projects/untangled-template-workspace/resources/public/js/cards/untangled/client/core.cljs","^Z",246,"^[",8,"^10",246,"^11",29,"^1B",true,"^12",["^13",["^14",["^13",[["^1R","^1S"]]]]],"^15","Calculates the query that can be used to pull (or merge) a component with an ident\n  to/from a normalized app database. Requires a tree of data that represents the instance of\n  the component in question (e.g. ident will work on it)"],"^1B",true,"^5","~$untangled.client.core/component-merge-query","^17",false,"^Y","resources/public/js/cards/untangled/client/core.cljs","^11",29,"^18",["^13",[["^1R","^1S"]]],"^19",null,"^1:",["^13",[null,null]],"^[",1,"^Z",246,"^10",246,"^1;",2,"^1<",true,"^12",["^13",["^14",["^13",[["^1R","^1S"]]]]],"^15","Calculates the query that can be used to pull (or merge) a component with an ident\n  to/from a normalized app database. Requires a tree of data that represents the instance of\n  the component in question (e.g. ident will work on it)"],"~$clear-pending-remote-requests!",["^ ","^W",null,"^X",["^ ","^Y","/Users/Nicole/projects/untangled-template-workspace/resources/public/js/cards/untangled/client/core.cljs","^Z",84,"^[",4,"^10",84,"^11",34,"^1F","^1G","^15","Remove all pending network requests. Useful on failures to eliminate cascading failures.","^12",["^13",["^14",["^13",[["^1H"]]]]]],"^1F","^1G","^5","~$untangled.client.core/clear-pending-remote-requests!","^17",false,"^Y","resources/public/js/cards/untangled/client/core.cljs","^11",34,"^18",["^13",[["^1H"]]],"^19",null,"^1:",["^13",[null,null]],"^[",1,"^Z",80,"^10",84,"^1;",1,"^1<",true,"^12",["^13",["^14",["^13",[["^1H"]]]]],"^15","Remove all pending network requests. Useful on failures to eliminate cascading failures."],"~$reset-history!",["^ ","^W",null,"^X",["^ ","^Y","/Users/Nicole/projects/untangled-template-workspace/resources/public/js/cards/untangled/client/core.cljs","^Z",87,"^[",4,"^10",87,"^11",18,"^1F","^1G","^15","Returns the application with history reset to its initial, empty state. Resets application history to its initial, empty state. Suitable for resetting the app for situations such as user log out.","^12",["^13",["^14",["^13",[["^1H"]]]]]],"^1F","^1G","^5","~$untangled.client.core/reset-history!","^17",false,"^Y","resources/public/js/cards/untangled/client/core.cljs","^11",18,"^18",["^13",[["^1H"]]],"^19",null,"^1:",["^13",[null,null]],"^[",1,"^Z",80,"^10",87,"^1;",1,"^1<",true,"^12",["^13",["^14",["^13",[["^1H"]]]]],"^15","Returns the application with history reset to its initial, empty state. Resets application history to its initial, empty state. Suitable for resetting the app for situations such as user log out."],"~$history",["^ ","^W",null,"^X",["^ ","^Y","/Users/Nicole/projects/untangled-template-workspace/resources/public/js/cards/untangled/client/core.cljs","^Z",86,"^[",4,"^10",86,"^11",11,"^1F","^1G","^15","Return a serialized version of the current history of the application, suitable for network transfer","^12",["^13",["^14",["^13",[["^1H"]]]]]],"^1F","^1G","^5","~$untangled.client.core/history","^17",false,"^Y","resources/public/js/cards/untangled/client/core.cljs","^11",11,"^18",["^13",[["^1H"]]],"^19",null,"^1:",["^13",[null,null]],"^[",1,"^Z",80,"^10",86,"^1;",1,"^1<",true,"^12",["^13",["^14",["^13",[["^1H"]]]]],"^15","Return a serialized version of the current history of the application, suitable for network transfer"],"~$->Application",["^ ","^W",null,"^X",["^ ","^Y","/Users/Nicole/projects/untangled-template-workspace/resources/public/js/cards/untangled/client/core.cljs","^Z",172,"^[",12,"^10",172,"^11",23,"~:internal-ctor",true,"~:factory","~:positional","^12",["^13",["^14",["^13",[["^1K","~$mutation-merge","~$started-callback","~$networking","~$queue","~$response-channel","^2A","~$parser","^28","^29"]]]]]],"^5","~$untangled.client.core/->Application","^17",false,"^Y","resources/public/js/cards/untangled/client/core.cljs","^11",23,"^18",["^13",[["^1K","^2T","^2U","^2V","^2W","^2X","^2A","^2Y","^28","^29"]]],"^19",null,"^1:",["^13",[null,null]],"^[",1,"^2Q",true,"^2R","^2S","^Z",172,"^10",172,"^1;",10,"^1<",true,"^12",["^13",["^14",["^13",[["^1K","^2T","^2U","^2V","^2W","^2X","^2A","^2Y","^28","^29"]]]]]],"~$map->Application",["^ ","^W",null,"^X",["^ ","^Y","/Users/Nicole/projects/untangled-template-workspace/resources/public/js/cards/untangled/client/core.cljs","^Z",172,"^[",12,"^10",172,"^11",23,"^2Q",true,"^2R","~:map","^12",["^13",["^14",["^13",[["~$G__37670"]]]]]],"^5","~$untangled.client.core/map->Application","^17",false,"^Y","resources/public/js/cards/untangled/client/core.cljs","^11",23,"^18",["^13",[["^31"]]],"^19",null,"^1:",["^13",[null,null]],"^[",1,"^2Q",true,"^2R","^30","^Z",172,"^10",172,"^1;",1,"^1<",true,"^12",["^13",["^14",["^13",[["^31"]]]]]],"~$UntangledApplication",["^ ","^X",["^ ","^Y","/Users/Nicole/projects/untangled-template-workspace/resources/public/js/cards/untangled/client/core.cljs","^Z",80,"^[",14,"^10",80,"^11",34,"^15",null,"~:protocol-symbol",true,"~:jsdoc",["^13",["@interface"]],"~:protocol-info",["^ ","~:methods",["^ ","^1E",[["^1H","^1C","^1I"]],"^21",[["^1H","^22"]],"~$reset-app!",[["^1H","^1C","~$callback"]],"^2J",[["^1H"]],"^2>",[["^1H"]],"^2N",[["^1H"]],"^2L",[["^1H"]]]]],"^34",true,"^5","^1G","^Y","resources/public/js/cards/untangled/client/core.cljs","^11",34,"^[",1,"^Z",80,"^36",["^ ","^37",["^ ","^1E",[["^1H","^1C","^1I"]],"^21",[["^1H","^22"]],"^38",[["^1H","^1C","^39"]],"^2J",[["^1H"]],"^2>",[["^1H"]],"^2N",[["^1H"]],"^2L",[["^1H"]]]],"~:info",null,"^10",80,"~:impls",["^4",["~$untangled.client.core/Application"]],"^15",null,"^35",["^13",["@interface"]]],"^38",["^ ","^W",null,"^X",["^ ","^Y","/Users/Nicole/projects/untangled-template-workspace/resources/public/js/cards/untangled/client/core.cljs","^Z",83,"^[",4,"^10",83,"^11",14,"^1F","^1G","^15","Replace the entire app state with the initial app state defined on the root component (includes auto-merging of unions). callback can be nil, a function, or :original (to call original started-callback).","^12",["^13",["^14",["^13",[["^1H","^1C","^39"]]]]]],"^1F","^1G","^5","~$untangled.client.core/reset-app!","^17",false,"^Y","resources/public/js/cards/untangled/client/core.cljs","^11",14,"^18",["^13",[["^1H","^1C","^39"]]],"^19",null,"^1:",["^13",[null,null]],"^[",1,"^Z",80,"^10",83,"^1;",3,"^1<",true,"^12",["^13",["^14",["^13",[["^1H","^1C","^39"]]]]],"^15","Replace the entire app state with the initial app state defined on the root component (includes auto-merging of unions). callback can be nil, a function, or :original (to call original started-callback)."],"~$clear-queue",["^ ","^W",null,"^X",["^ ","^Y","/Users/Nicole/projects/untangled-template-workspace/resources/public/js/cards/untangled/client/core.cljs","^Z",139,"^[",7,"^10",139,"^11",18,"^12",["^13",["^14",["^13",[["^2W"]]]]],"^15","Needed for mocking in tests. Do not use directly. Use UntangledApplication protocol methods instead."],"^5","~$untangled.client.core/clear-queue","^17",false,"^Y","resources/public/js/cards/untangled/client/core.cljs","^11",18,"^18",["^13",[["^2W"]]],"^19",null,"^1:",["^13",[null,null]],"^[",1,"^Z",139,"^10",139,"^1;",1,"^1<",true,"^12",["^13",["^14",["^13",[["^2W"]]]]],"^15","Needed for mocking in tests. Do not use directly. Use UntangledApplication protocol methods instead."],"~$initialize",["^ ","^W",null,"^X",["^ ","^Y","/Users/Nicole/projects/untangled-template-workspace/resources/public/js/cards/untangled/client/core.cljs","^Z",114,"^[",8,"^10",114,"^11",18,"^1B",true,"^12",["^13",["^14",["^13",[[["^ ","^27",["^2V","^2U"],"^2:","^S"],"^1K","^1C","^2;","^29"]]]]],"^15","Initialize the untangled Application. Creates network queue, sets up i18n, creates reconciler, mounts it, and returns\n  the initialized app"],"^1B",true,"^5","~$untangled.client.core/initialize","^17",false,"^Y","resources/public/js/cards/untangled/client/core.cljs","^11",18,"^18",["^13",[["~$p__37645","^1K","^1C","^2;","^29"]]],"^19",null,"^1:",["^13",[null,null]],"^[",1,"^Z",114,"^10",114,"^1;",5,"^1<",true,"^12",["^13",["^14",["^13",[[["^ ","^27",["^2V","^2U"],"^2:","^S"],"^1K","^1C","^2;","^29"]]]]],"^15","Initialize the untangled Application. Creates network queue, sets up i18n, creates reconciler, mounts it, and returns\n  the initialized app"],"~$new-untangled-test-client",["^ ","^W",null,"^X",["^ ","^Y","/Users/Nicole/projects/untangled-template-workspace/resources/public/js/cards/untangled/client/core.cljs","^Z",207,"^[",7,"^10",207,"^11",32,"^12",["^13",["^14",["^13",[["~$&",["^ ","^27",["^1K","^2U"],"~:or",["^ ","^1K",["^ "],"^2U",null]]]]]]],"^15","Create a test client that has no networking. Useful for UI testing with a real Untangled app container.","^1?",["^ ","^17",true,"^1;",0,"^18",[["^13",[["^ ","^27",["^1K","^2U"],"^3D",["^ ","^1K",["^ "],"^2U",null]]]]],"^12",["^13",[["~$&",["^ ","^27",["^1K","^2U"],"^3D",["^ ","^1K",["^ "],"^2U",null]]]]],"^1:",["^13",[null]]]],"^5","~$untangled.client.core/new-untangled-test-client","^17",true,"^Y","resources/public/js/cards/untangled/client/core.cljs","^11",32,"^1?",["^ ","^17",true,"^1;",0,"^18",[["^13",[["^ ","^27",["^1K","^2U"],"^3D",["^ ","^1K",["^ "],"^2U",null]]]]],"^12",["^13",[["~$&",["^ ","^27",["^1K","^2U"],"^3D",["^ ","^1K",["^ "],"^2U",null]]]]],"^1:",["^13",[null]]],"^18",[["^13",[["^ ","^27",["^1K","^2U"],"^3D",["^ ","^1K",["^ "],"^2U",null]]]]],"^19",null,"^1:",["^13",[null]],"^[",1,"^Z",207,"^10",207,"^1;",0,"^1<",true,"^12",["^13",[["~$&",["^ ","^27",["^1K","^2U"],"^3D",["^ ","^1K",["^ "],"^2U",null]]]]],"^15","Create a test client that has no networking. Useful for UI testing with a real Untangled app container."],"~$InitialAppState",["^ ","^X",["^ ","^Y","/Users/Nicole/projects/untangled-template-workspace/resources/public/js/cards/untangled/client/core.cljs","^Z",77,"^[",14,"^10",77,"^11",29,"^15",null,"^34",true,"^35",["^13",["@interface"]],"^36",["^ ","^37",["^ ","^1K",[["^1M","^1N"]]]]],"^34",true,"^5","^1L","^Y","resources/public/js/cards/untangled/client/core.cljs","^11",29,"^[",1,"^Z",77,"^36",["^ ","^37",["^ ","^1K",[["^1M","^1N"]]]],"^3:",null,"^10",77,"^3;",["^4",[]],"^15",null,"^35",["^13",["@interface"]]],"~$preprocess-merge",["^ ","^W",null,"^X",["^ ","^Y","/Users/Nicole/projects/untangled-template-workspace/resources/public/js/cards/untangled/client/core.cljs","^Z",255,"^[",8,"^10",255,"^11",24,"^1B",true,"^12",["^13",["^14",["^13",[["~$state-atom","^1R","^1S"]]]]],"^15","Does the steps necessary to honor the data merge technique defined by Untangled with respect\n  to data overwrites in the app database."],"^1B",true,"^5","~$untangled.client.core/preprocess-merge","^17",false,"^Y","resources/public/js/cards/untangled/client/core.cljs","^11",24,"^18",["^13",[["^3H","^1R","^1S"]]],"^19",null,"^1:",["^13",[null,null]],"^[",1,"^Z",255,"^10",255,"^1;",3,"^1<",true,"^12",["^13",["^14",["^13",[["^3H","^1R","^1S"]]]]],"^15","Does the steps necessary to honor the data merge technique defined by Untangled with respect\n  to data overwrites in the app database."],"~$Application",["^ ","~:num-fields",10,"~:protocols",["^4",["~$cljs.core/IRecord","~$cljs.core/IEquiv","~$cljs.core/IHash","~$cljs.core/ICollection","~$cljs.core/ICounted","~$cljs.core/ISeqable","~$cljs.core/IMeta","~$cljs.core/ICloneable","^1G","~$cljs.core/IPrintWithWriter","~$cljs.core/IIterable","~$cljs.core/IWithMeta","~$cljs.core/IAssociative","~$cljs.core/IMap","~$cljs.core/ILookup"]],"^5","^3<","^Y","resources/public/js/cards/untangled/client/core.cljs","^11",23,"~:type",true,"^[",12,"^2Q",true,"^Z",172,"~:record",true,"^10",172,"~:skip-protocol-flag",["^4",["^3M","^3N","^3O","^3P","^3Q","^3R","^3S","^3T","^3U","^3W","^3X","^3Y","^3Z"]]],"~$new-untangled-client",["^ ","^W",null,"^X",["^ ","^Y","/Users/Nicole/projects/untangled-template-workspace/resources/public/js/cards/untangled/client/core.cljs","^Z",20,"^[",7,"^10",20,"^11",27,"^12",["^13",["^14",["^13",[["~$&",["^ ","^27",["^1K","^2T","^2U","^2V","~$request-transform","~$network-error-callback","~$migrate","~$pathopt","~$transit-handlers","~$shared"],"^3D",["^ ","^1K",["^ "],"^2U",["^13",["~$constantly",null]],"^44",["^13",["^49",null]],"^45",null,"^48",null]]]]]]],"^15","Entrypoint for creating a new untangled client. Instantiates an Application with default values, unless\n  overridden by the parameters. If you do not supply a networking object, one will be provided that connects to the\n  same server the application was served from, at `/api`.\n\n  If you supply a `:request-transform` it must be a function:\n\n  ```\n (fn [edn headers] [edn' headers'])\n  ```\n\n  it can replace the outgoing EDN or headers (returning both as a vector). NOTE: Both of these are clojurescript types.\n  The edn will be encoded with transit, and the headers will be converted to a js map.\n\n  `:initial-state` is your applications initial state. If it is an atom, it *must* be normalized. Untangled databases\n  always have normalization turned on (for server data merging). If it is not an atom, it will be auto-normalized.\n\n  `:started-callback` is an optional function that will receive the intiailized untangled application after it is\n  mounted in the DOM, and is useful for triggering initial loads, routing mutations, etc. The Om reconciler is available\n  under the `:reconciler` key (and you can access the app state, root node, etc from there.)\n\n  `:network-error-callback` is a function of two arguments, the app state atom and the error, which will be invoked for\n  every network error (status code >= 400, or no network found), should you choose to use the built-in networking record.\n\n  `:migrate` is optional. It is a (fn [state tid->rid] ... state') that should return a new state where all tempids\n  (the keys of `tid->rid`) are rewritten to real ids (the values of tid->rid). This defaults to a full recursive\n  algorithm against all data in the app-state, which is correct but possibly slow).  Note that tempids will have an Om tempid data type.\n  See Om reconciler documentation for further information.\n\n  `:transit-handlers` (optional). A map with keys for `:read` and `:write`, which contain maps to be used for the read\n  and write side of transit to extend the supported data types. See `make-untangled-network` in network.cljs.\n\n  `:pathopt` (optional, defaults to true).  Turn on/off Om path optimization. This is here in case you're experiencing problems with rendering.\n  Path optimization is a rendering optimization that may still have bugs.\n\n  `:shared` (optional). A map of arbitrary values to be shared across all components, accessible to them via (om/shared this)\n\n  `:mutation-merge (optional). A function `(fn [state mutation-symbol return-value])` that receives the app state as a\n  map (NOT an atom) and should return the new state as a map. This function is run when network results are being merged,\n  and is called once for each mutation that had a return value on the server. Returning nil from this function is safe, and will be ignored\n  with a console message for debugging. If you need information about the original mutation arguments then you must reflect\n  them back from the server in your return value. By default such values are discarded.\n\n  There is currently no way to circumvent the encoding of the body into transit. If you want to talk to other endpoints\n  via alternate protocols you must currently implement that outside of the framework (e.g. global functions/state).\n  ","^1?",["^ ","^17",true,"^1;",0,"^18",[["^13",[["^ ","^27",["^1K","^2T","^2U","^2V","^43","^44","^45","^46","^47","^48"],"^3D",["^ ","^1K",["^ "],"^2U",["^13",["^49",null]],"^44",["^13",["^49",null]],"^45",null,"^48",null]]]]],"^12",["^13",[["~$&",["^ ","^27",["^1K","^2T","^2U","^2V","^43","^44","^45","^46","^47","^48"],"^3D",["^ ","^1K",["^ "],"^2U",["^13",["^49",null]],"^44",["^13",["^49",null]],"^45",null,"^48",null]]]]],"^1:",["^13",[null]]]],"^5","~$untangled.client.core/new-untangled-client","^17",true,"^Y","resources/public/js/cards/untangled/client/core.cljs","^11",27,"^1?",["^ ","^17",true,"^1;",0,"^18",[["^13",[["^ ","^27",["^1K","^2T","^2U","^2V","^43","^44","^45","^46","^47","^48"],"^3D",["^ ","^1K",["^ "],"^2U",["^13",["^49",null]],"^44",["^13",["^49",null]],"^45",null,"^48",null]]]]],"^12",["^13",[["~$&",["^ ","^27",["^1K","^2T","^2U","^2V","^43","^44","^45","^46","^47","^48"],"^3D",["^ ","^1K",["^ "],"^2U",["^13",["^49",null]],"^44",["^13",["^49",null]],"^45",null,"^48",null]]]]],"^1:",["^13",[null]]],"^18",[["^13",[["^ ","^27",["^1K","^2T","^2U","^2V","^43","^44","^45","^46","^47","^48"],"^3D",["^ ","^1K",["^ "],"^2U",["^13",["^49",null]],"^44",["^13",["^49",null]],"^45",null,"^48",null]]]]],"^19",null,"^1:",["^13",[null]],"^[",1,"^Z",20,"^10",20,"^1;",0,"^1<",true,"^12",["^13",[["~$&",["^ ","^27",["^1K","^2T","^2U","^2V","^43","^44","^45","^46","^47","^48"],"^3D",["^ ","^1K",["^ "],"^2U",["^13",["^49",null]],"^44",["^13",["^49",null]],"^45",null,"^48",null]]]]],"^15","Entrypoint for creating a new untangled client. Instantiates an Application with default values, unless\n  overridden by the parameters. If you do not supply a networking object, one will be provided that connects to the\n  same server the application was served from, at `/api`.\n\n  If you supply a `:request-transform` it must be a function:\n\n  ```\n (fn [edn headers] [edn' headers'])\n  ```\n\n  it can replace the outgoing EDN or headers (returning both as a vector). NOTE: Both of these are clojurescript types.\n  The edn will be encoded with transit, and the headers will be converted to a js map.\n\n  `:initial-state` is your applications initial state. If it is an atom, it *must* be normalized. Untangled databases\n  always have normalization turned on (for server data merging). If it is not an atom, it will be auto-normalized.\n\n  `:started-callback` is an optional function that will receive the intiailized untangled application after it is\n  mounted in the DOM, and is useful for triggering initial loads, routing mutations, etc. The Om reconciler is available\n  under the `:reconciler` key (and you can access the app state, root node, etc from there.)\n\n  `:network-error-callback` is a function of two arguments, the app state atom and the error, which will be invoked for\n  every network error (status code >= 400, or no network found), should you choose to use the built-in networking record.\n\n  `:migrate` is optional. It is a (fn [state tid->rid] ... state') that should return a new state where all tempids\n  (the keys of `tid->rid`) are rewritten to real ids (the values of tid->rid). This defaults to a full recursive\n  algorithm against all data in the app-state, which is correct but possibly slow).  Note that tempids will have an Om tempid data type.\n  See Om reconciler documentation for further information.\n\n  `:transit-handlers` (optional). A map with keys for `:read` and `:write`, which contain maps to be used for the read\n  and write side of transit to extend the supported data types. See `make-untangled-network` in network.cljs.\n\n  `:pathopt` (optional, defaults to true).  Turn on/off Om path optimization. This is here in case you're experiencing problems with rendering.\n  Path optimization is a rendering optimization that may still have bugs.\n\n  `:shared` (optional). A map of arbitrary values to be shared across all components, accessible to them via (om/shared this)\n\n  `:mutation-merge (optional). A function `(fn [state mutation-symbol return-value])` that receives the app state as a\n  map (NOT an atom) and should return the new state as a map. This function is run when network results are being merged,\n  and is called once for each mutation that had a return value on the server. Returning nil from this function is safe, and will be ignored\n  with a console message for debugging. If you need information about the original mutation arguments then you must reflect\n  them back from the server in your return value. By default such values are discarded.\n\n  There is currently no way to circumvent the encoding of the body into transit. If you want to talk to other endpoints\n  via alternate protocols you must currently implement that outside of the framework (e.g. global functions/state).\n  "]],"~:require-macros",["^ ","^O","^P","^P","^P"],"~:cljs.analyzer/constants",["^ ","~:seen",["^4",["^2U","~:untangled/meta","^1K","~:children","^29","~:network-error-callback","~:pathopt","~:untangled/merge","~:networking","~:read","~:response-channel","~:mutation-merge","~:config","~:queue","~:mounted?","~:migrate","~:transit-handlers","~:steps","~:reconciler","^2V","~:original","~:command","~:history","^2X","^3[","^2T","^2W","~:component","^28","~:global-error-callback","~:otherwise","~:merge-query","~:request-transform","^2A","~:parser","~:arg","~:merge-data","~:shared","~:started-callback","^2Y","~:initial-state","~:query","~:union","~:reconciler-options","~:mutate","~:join"]],"~:order",["^4Z","^4[","^4@","^4A","^4C","^4F","^4K","^4J","^4U","^4Y","^52","^4R","^4?","^54","^3[","^4Q","^50","^51","^4D","^53","^4H","^4E","^4V","^4I","^4M","^4G","^4P","^4S","^4N","^4L","^4>","^1K","^2T","^2U","^2V","^2W","^2X","^2A","^2Y","^28","^29","^4B","^4T","^4X","^4O","^4W"]],"^15",null]