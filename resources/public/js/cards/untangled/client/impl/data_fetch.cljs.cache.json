["^ ","~:rename-macros",["^ "],"~:renames",["^ "],"~:use-macros",["^ ","~$go","~$cljs.core.async.macros","~$prewalk","~$clojure.walk"],"~:excludes",["~#set",[]],"~:name","~$untangled.client.impl.data-fetch","~:imports",null,"~:requires",["^ ","~$uuid","~$cljs-uuid-utils.core","~$set","~$clojure.set","~$log","~$untangled.client.logging","^>","^>","~$plumbing","~$untangled.client.impl.om-plumbing","~$om.next.impl.parser","^E","~$omp","~$om.next.protocols","~$udom","~$untangled.dom","^@","^@","~$m","~$untangled.client.mutations","~$util","~$om.util","^G","^G","^J","^J","~$op","^E","^B","^B","~$om","~$om.next","^D","^D","^O","^O","^I","^I","^6","^6","^L","^L"],"~:uses",["^ ","^5","^6"],"~:defs",["^ ","~$set-failed!",["^ ","~:protocol-inline",null,"~:meta",["^ ","~:file","/Users/Nicole/projects/untangled-template-workspace/resources/public/js/cards/untangled/client/impl/data_fetch.cljs","~:line",310,"~:column",9,"~:end-line",310,"~:end-column",20,"~:arglists",["~#list",["~$quote",["^[",[["~$state"],["^11","~$params"]]]]],"~:doc","Returns a marker (based on the input state) that is in the error state","~:top-fn",["^ ","~:variadic",false,"~:max-fixed-arity",2,"~:method-params",["^[",[["^11"],["^11","^12"]]],"^Z",["^[",[["^11"],["^11","^12"]]],"~:arglists-meta",["^[",[null,null]]]],"^9","~$untangled.client.impl.data-fetch/set-failed!","^15",false,"^U","resources/public/js/cards/untangled/client/impl/data_fetch.cljs","^Y",20,"^14",["^ ","^15",false,"^16",2,"^17",["^[",[["^11"],["^11","^12"]]],"^Z",["^[",[["^11"],["^11","^12"]]],"^18",["^[",[null,null]]],"^17",["^[",[["^11"],["^11","^12"]]],"~:protocol-impl",null,"^18",["^[",[null,null]],"^W",3,"^V",310,"^X",310,"^16",2,"~:fn-var",true,"^Z",["^[",[["^11"],["^11","^12"]]],"^13","Returns a marker (based on the input state) that is in the error state"],"~$data-target",["^ ","^S",null,"^T",["^ ","^U","/Users/Nicole/projects/untangled-template-workspace/resources/public/js/cards/untangled/client/impl/data_fetch.cljs","^V",246,"^W",7,"^X",246,"^Y",18,"^Z",["^[",["^10",["^[",[["^11"]]]]],"^13","Return the ident (if any) of the component related to the query in the data state marker. An ident is required\n  to be present if the marker is targeting a field."],"^9","~$untangled.client.impl.data-fetch/data-target","^15",false,"^U","resources/public/js/cards/untangled/client/impl/data_fetch.cljs","^Y",18,"^17",["^[",[["^11"]]],"^1:",null,"^18",["^[",[null,null]],"^W",1,"^V",246,"^X",246,"^16",1,"^1;",true,"^Z",["^[",["^10",["^[",[["^11"]]]]],"^13","Return the ident (if any) of the component related to the query in the data state marker. An ident is required\n  to be present if the marker is targeting a field."],"~$mark-parallel-loading",["^ ","^S",null,"^T",["^ ","^U","/Users/Nicole/projects/untangled-template-workspace/resources/public/js/cards/untangled/client/impl/data_fetch.cljs","^V",54,"^W",7,"^X",54,"^Y",28,"^Z",["^[",["^10",["^[",[["~$reconciler"]]]]],"^13","Marks all of the items in the ready-to-load state as loading, places the loading markers in the appropriate locations\n  in the app state, and return maps with the keys:\n\n  `query` : The full query to send to the server.\n  `on-load` : The function to call to merge a response. Detects missing data and sets failure markers for those.\n  `on-error` : The function to call to set network/server error(s) in place of loading markers.\n  `callback-args` : Args to pass back to on-load and on-error. These are separated\n    so that `rewrite-tempids-in-request-queue` can rewrite tempids for merge and\n    error callbacks\n\n  response-channel will have the response posted to it when the request is done.\n  ."],"^9","~$untangled.client.impl.data-fetch/mark-parallel-loading","^15",false,"^U","resources/public/js/cards/untangled/client/impl/data_fetch.cljs","^Y",28,"^17",["^[",[["^1?"]]],"^1:",null,"^18",["^[",[null,null]],"^W",1,"^V",54,"^X",54,"^16",1,"^1;",true,"^Z",["^[",["^10",["^[",[["^1?"]]]]],"^13","Marks all of the items in the ready-to-load state as loading, places the loading markers in the appropriate locations\n  in the app state, and return maps with the keys:\n\n  `query` : The full query to send to the server.\n  `on-load` : The function to call to merge a response. Detects missing data and sets failure markers for those.\n  `on-error` : The function to call to set network/server error(s) in place of loading markers.\n  `callback-args` : Args to pass back to on-load and on-error. These are separated\n    so that `rewrite-tempids-in-request-queue` can rewrite tempids for merge and\n    error callbacks\n\n  response-channel will have the response posted to it when the request is done.\n  ."],"~$failed?",["^ ","^S",null,"^T",["^ ","^U","/Users/Nicole/projects/untangled-template-workspace/resources/public/js/cards/untangled/client/impl/data_fetch.cljs","^V",38,"^W",9,"^X",38,"^Y",16,"^Z",["^[",["^10",["^[",[["^11"]]]]],"^13","Test if the given item is a data state marker in the failed state"],"^9","~$untangled.client.impl.data-fetch/failed?","^15",false,"^U","resources/public/js/cards/untangled/client/impl/data_fetch.cljs","^Y",16,"^17",["^[",[["^11"]]],"^1:",null,"^18",["^[",[null,null]],"^W",3,"^V",38,"^X",38,"^16",1,"^1;",true,"^Z",["^[",["^10",["^[",[["^11"]]]]],"^13","Test if the given item is a data state marker in the failed state"],"~$split-items-ready-to-load",["^ ","^S",null,"^T",["^ ","^U","/Users/Nicole/projects/untangled-template-workspace/resources/public/js/cards/untangled/client/impl/data_fetch.cljs","^V",107,"^W",7,"^X",107,"^Y",32,"^Z",["^[",["^10",["^[",[["~$items-ready-to-load"]]]]]],"^9","~$untangled.client.impl.data-fetch/split-items-ready-to-load","^15",false,"^U","resources/public/js/cards/untangled/client/impl/data_fetch.cljs","^Y",32,"^17",["^[",[["^1D"]]],"^1:",null,"^18",["^[",[null,null]],"^W",1,"^V",107,"^X",107,"^16",1,"^1;",true,"^Z",["^[",["^10",["^[",[["^1D"]]]]]],"~$data-state?",["^ ","^S",null,"^T",["^ ","^U","/Users/Nicole/projects/untangled-template-workspace/resources/public/js/cards/untangled/client/impl/data_fetch.cljs","^V",24,"^W",7,"^X",24,"^Y",18,"^Z",["^[",["^10",["^[",[["^11"]]]]],"^13","Test if the given bit of state is a data fetch state-tracking marker"],"^9","~$untangled.client.impl.data-fetch/data-state?","^15",false,"^U","resources/public/js/cards/untangled/client/impl/data_fetch.cljs","^Y",18,"^17",["^[",[["^11"]]],"^1:",null,"^18",["^[",[null,null]],"^W",1,"^V",24,"^X",24,"^16",1,"^1;",true,"^Z",["^[",["^10",["^[",[["^11"]]]]],"^13","Test if the given bit of state is a data fetch state-tracking marker"],"~$ready?",["^ ","^S",null,"^T",["^ ","^U","/Users/Nicole/projects/untangled-template-workspace/resources/public/js/cards/untangled/client/impl/data_fetch.cljs","^V",32,"^W",9,"^X",32,"^Y",15,"^Z",["^[",["^10",["^[",[["^11"]]]]],"^13","Test if the given item is a data state marker that is in the ready state"],"^9","~$untangled.client.impl.data-fetch/ready?","^15",false,"^U","resources/public/js/cards/untangled/client/impl/data_fetch.cljs","^Y",15,"^17",["^[",[["^11"]]],"^1:",null,"^18",["^[",[null,null]],"^W",3,"^V",32,"^X",32,"^16",1,"^1;",true,"^Z",["^[",["^10",["^[",[["^11"]]]]],"^13","Test if the given item is a data state marker that is in the ready state"],"~$ready-state",["^ ","^S",null,"^T",["^ ","^U","/Users/Nicole/projects/untangled-template-workspace/resources/public/js/cards/untangled/client/impl/data_fetch.cljs","^V",210,"^W",7,"^X",210,"^Y",18,"^Z",["^[",["^10",["^[",[[["^ ","~:keys",["~$ident","~$field","^12","~$without","~$query","~$post-mutation","~$post-mutation-params","~$fallback","~$parallel","~$refresh","~$marker","~$target"],"~:or",["^ ","^1N",["^8",[]],"^1T",[],"^1U",true]]]]]]],"^13","Generate a ready-to-load state with all of the necessary details to do\n  remoting and merging."],"^9","~$untangled.client.impl.data-fetch/ready-state","^15",false,"^U","resources/public/js/cards/untangled/client/impl/data_fetch.cljs","^Y",18,"^17",["^[",[["~$p__36811"]]],"^1:",null,"^18",["^[",[null,null]],"^W",1,"^V",210,"^X",210,"^16",1,"^1;",true,"^Z",["^[",["^10",["^[",[[["^ ","^1K",["^1L","^1M","^12","^1N","^1O","^1P","^1Q","^1R","^1S","^1T","^1U","^1V"],"^1W",["^ ","^1N",["^8",[]],"^1T",[],"^1U",true]]]]]]],"^13","Generate a ready-to-load state with all of the necessary details to do\n  remoting and merging."],"~$set-loading!",["^ ","^S",null,"^T",["^ ","^U","/Users/Nicole/projects/untangled-template-workspace/resources/public/js/cards/untangled/client/impl/data_fetch.cljs","^V",305,"^W",9,"^X",305,"^Y",21,"^Z",["^[",["^10",["^[",[["^11"],["^11","^12"]]]]],"^13","Returns a marker (based on the input state) that is in the loading state (and ensures that it has a UUID)","^14",["^ ","^15",false,"^16",2,"^17",["^[",[["^11"],["^11","^12"]]],"^Z",["^[",[["^11"],["^11","^12"]]],"^18",["^[",[null,null]]]],"^9","~$untangled.client.impl.data-fetch/set-loading!","^15",false,"^U","resources/public/js/cards/untangled/client/impl/data_fetch.cljs","^Y",21,"^14",["^ ","^15",false,"^16",2,"^17",["^[",[["^11"],["^11","^12"]]],"^Z",["^[",[["^11"],["^11","^12"]]],"^18",["^[",[null,null]]],"^17",["^[",[["^11"],["^11","^12"]]],"^1:",null,"^18",["^[",[null,null]],"^W",3,"^V",305,"^X",305,"^16",2,"^1;",true,"^Z",["^[",[["^11"],["^11","^12"]]],"^13","Returns a marker (based on the input state) that is in the loading state (and ensures that it has a UUID)"],"~$elide-ast-nodes",["^ ","^S",null,"^T",["^ ","^U","/Users/Nicole/projects/untangled-template-workspace/resources/public/js/cards/untangled/client/impl/data_fetch.cljs","^V",174,"^W",7,"^X",174,"^Y",22,"^Z",["^[",["^10",["^[",[[["^ ","^1K",["~$key","~$union-key","~$children"],"~:as","~$ast"],"~$elision-set"]]]]],"^13","Remove items from a query (AST) that have a key listed in the elision-set"],"^9","~$untangled.client.impl.data-fetch/elide-ast-nodes","^15",false,"^U","resources/public/js/cards/untangled/client/impl/data_fetch.cljs","^Y",22,"^17",["^[",[["~$p__36805","^26"]]],"^1:",null,"^18",["^[",[null,null]],"^W",1,"^V",174,"^X",174,"^16",2,"^1;",true,"^Z",["^[",["^10",["^[",[[["^ ","^1K",["^21","^22","^23"],"^24","^25"],"^26"]]]]],"^13","Remove items from a query (AST) that have a key listed in the elision-set"],"~$data-marker?",["^ ","^S",null,"^T",["^ ","^U","/Users/Nicole/projects/untangled-template-workspace/resources/public/js/cards/untangled/client/impl/data_fetch.cljs","^V",266,"^W",7,"^X",266,"^Y",19,"^Z",["^[",["^10",["^[",[["^11"]]]]],"^13","Test if the user desires a copy of the state marker to appear in the app state at the data path of the target data."],"^9","~$untangled.client.impl.data-fetch/data-marker?","^15",false,"^U","resources/public/js/cards/untangled/client/impl/data_fetch.cljs","^Y",19,"^17",["^[",[["^11"]]],"^1:",null,"^18",["^[",[null,null]],"^W",1,"^V",266,"^X",266,"^16",1,"^1;",true,"^Z",["^[",["^10",["^[",[["^11"]]]]],"^13","Test if the user desires a copy of the state marker to appear in the app state at the data path of the target data."],"~$data-path",["^ ","^S",null,"^T",["^ ","^U","/Users/Nicole/projects/untangled-template-workspace/resources/public/js/cards/untangled/client/impl/data_fetch.cljs","^V",280,"^W",7,"^X",280,"^Y",16,"^Z",["^[",["^10",["^[",[["^11"]]]]],"^13","Get the app-state database path of the target of the load that the given data state marker is trying to load."],"^9","~$untangled.client.impl.data-fetch/data-path","^15",false,"^U","resources/public/js/cards/untangled/client/impl/data_fetch.cljs","^Y",16,"^17",["^[",[["^11"]]],"^1:",null,"^18",["^[",[null,null]],"^W",1,"^V",280,"^X",280,"^16",1,"^1;",true,"^Z",["^[",["^10",["^[",[["^11"]]]]],"^13","Get the app-state database path of the target of the load that the given data state marker is trying to load."],"~$relocate-targeted-results",["^ ","^S",null,"^T",["^ ","^U","/Users/Nicole/projects/untangled-template-workspace/resources/public/js/cards/untangled/client/impl/data_fetch.cljs","^V",326,"^W",7,"^X",326,"^Y",32,"^Z",["^[",["^10",["^[",[["~$state-atom","~$items"]]]]],"^13","For items that are manually targeted, move them in app state from their result location to their target location."],"^9","~$untangled.client.impl.data-fetch/relocate-targeted-results","^15",false,"^U","resources/public/js/cards/untangled/client/impl/data_fetch.cljs","^Y",32,"^17",["^[",[["^2>","^2?"]]],"^1:",null,"^18",["^[",[null,null]],"^W",1,"^V",326,"^X",326,"^16",2,"^1;",true,"^Z",["^[",["^10",["^[",[["^2>","^2?"]]]]],"^13","For items that are manually targeted, move them in app state from their result location to their target location."],"~$inject-query-params",["^ ","^S",null,"^T",["^ ","^U","/Users/Nicole/projects/untangled-template-workspace/resources/public/js/cards/untangled/client/impl/data_fetch.cljs","^V",184,"^W",7,"^X",184,"^Y",26,"^Z",["^[",["^10",["^[",[["^25","^12"]]]]],"^13","Inject parameters into elements of the top-level query.\n\n  `params` is a map from keyword (on the query in the AST) to parameter maps. So, given the AST for this query:\n\n  ```\n  [:a :b :c]\n  ```\n\n  and a `params` of `{:a {:x 1} :c {:y 2}}` you'll get an AST representing:\n\n  ```\n  [(:a {:x 1}) :b (:c {:y 2})]\n  ```\n  "],"^9","~$untangled.client.impl.data-fetch/inject-query-params","^15",false,"^U","resources/public/js/cards/untangled/client/impl/data_fetch.cljs","^Y",26,"^17",["^[",[["^25","^12"]]],"^1:",null,"^18",["^[",[null,null]],"^W",1,"^V",184,"^X",184,"^16",2,"^1;",true,"^Z",["^[",["^10",["^[",[["^25","^12"]]]]],"^13","Inject parameters into elements of the top-level query.\n\n  `params` is a map from keyword (on the query in the AST) to parameter maps. So, given the AST for this query:\n\n  ```\n  [:a :b :c]\n  ```\n\n  and a `params` of `{:a {:x 1} :c {:y 2}}` you'll get an AST representing:\n\n  ```\n  [(:a {:x 1}) :b (:c {:y 2})]\n  ```\n  "],"~$mark-loading",["^ ","^S",null,"^T",["^ ","^U","/Users/Nicole/projects/untangled-template-workspace/resources/public/js/cards/untangled/client/impl/data_fetch.cljs","^V",118,"^W",7,"^X",118,"^Y",19,"^Z",["^[",["^10",["^[",[["^1?"]]]]],"^13","Marks all of the items in the ready-to-load state as loading, places the loading markers in the appropriate locations\n  in the app state, and returns a map with the keys:\n\n  `query` : The full query to send to the server.\n  `on-load` : The function to call to merge a response. Detects missing data and sets failure markers for those.\n  `on-error` : The function to call to set network/server error(s) in place of loading markers.\n  `callback-args` : Args to pass back to on-load and on-error. These are separated\n    so that `rewrite-tempids-in-request-queue` can rewrite tempids for merge and\n    error callbacks\n\n  response-channel will have the response posted to it when the request is done.\n  ."],"^9","~$untangled.client.impl.data-fetch/mark-loading","^15",false,"^U","resources/public/js/cards/untangled/client/impl/data_fetch.cljs","^Y",19,"^17",["^[",[["^1?"]]],"^1:",null,"^18",["^[",[null,null]],"^W",1,"^V",118,"^X",118,"^16",1,"^1;",true,"^Z",["^[",["^10",["^[",[["^1?"]]]]],"^13","Marks all of the items in the ready-to-load state as loading, places the loading markers in the appropriate locations\n  in the app state, and returns a map with the keys:\n\n  `query` : The full query to send to the server.\n  `on-load` : The function to call to merge a response. Detects missing data and sets failure markers for those.\n  `on-error` : The function to call to set network/server error(s) in place of loading markers.\n  `callback-args` : Args to pass back to on-load and on-error. These are separated\n    so that `rewrite-tempids-in-request-queue` can rewrite tempids for merge and\n    error callbacks\n\n  response-channel will have the response posted to it when the request is done.\n  ."],"~$dedupe-by",["^ ","^S",null,"^T",["^ ","^U","/Users/Nicole/projects/untangled-template-workspace/resources/public/js/cards/untangled/client/impl/data_fetch.cljs","^V",80,"^W",7,"^X",80,"^Y",16,"^Z",["^[",["^10",["^[",[["~$keys-fn"],["^2F","~$coll"]]]]],"^13","Returns a lazy sequence of the elements of coll with dupes removed.\n   An element is a duplicate IFF (keys-fn element) has key collision with any prior element\n   to come before it. E.g. (dedupe-by identity [[:a] [:b] [:a] [:a :c]]) => [[:a] [:b]]\n   Returns a stateful transducer when no collection is provided.","^14",["^ ","^15",false,"^16",2,"^17",["^[",[["^2F"],["^2F","^2G"]]],"^Z",["^[",[["^2F"],["^2F","^2G"]]],"^18",["^[",[null,null]]]],"^9","~$untangled.client.impl.data-fetch/dedupe-by","^15",false,"^U","resources/public/js/cards/untangled/client/impl/data_fetch.cljs","^Y",16,"^14",["^ ","^15",false,"^16",2,"^17",["^[",[["^2F"],["^2F","^2G"]]],"^Z",["^[",[["^2F"],["^2F","^2G"]]],"^18",["^[",[null,null]]],"^17",["^[",[["^2F"],["^2F","^2G"]]],"^1:",null,"^18",["^[",[null,null]],"^W",1,"^V",80,"^X",80,"^16",2,"^1;",true,"^Z",["^[",[["^2F"],["^2F","^2G"]]],"^13","Returns a lazy sequence of the elements of coll with dupes removed.\n   An element is a duplicate IFF (keys-fn element) has key collision with any prior element\n   to come before it. E.g. (dedupe-by identity [[:a] [:b] [:a] [:a :c]]) => [[:a] [:b]]\n   Returns a stateful transducer when no collection is provided."],"~$error-callback",["^ ","^S",null,"^T",["^ ","^U","/Users/Nicole/projects/untangled-template-workspace/resources/public/js/cards/untangled/client/impl/data_fetch.cljs","^V",385,"^W",8,"^X",385,"^Y",22,"~:private",true,"^Z",["^[",["^10",["^[",[["^1?"]]]]],"^13","Generates a callback that is used whenever a hard server error occurs (status code 400+ or network error).\n\n  The generated callback:\n\n  - Replaces affected loading markers with error markers (if :marker is true on the load item)\n  - Runs fallbacks associated with the loads\n  - Sets the global error marker (:untangled/server-error)\n  - Refreshes UI\n  "],"^2J",true,"^9","~$untangled.client.impl.data-fetch/error-callback","^15",false,"^U","resources/public/js/cards/untangled/client/impl/data_fetch.cljs","^Y",22,"^17",["^[",[["^1?"]]],"^1:",null,"^18",["^[",[null,null]],"^W",1,"^V",385,"^X",385,"^16",1,"^1;",true,"^Z",["^[",["^10",["^[",[["^1?"]]]]],"^13","Generates a callback that is used whenever a hard server error occurs (status code 400+ or network error).\n\n  The generated callback:\n\n  - Replaces affected loading markers with error markers (if :marker is true on the load item)\n  - Runs fallbacks associated with the loads\n  - Sets the global error marker (:untangled/server-error)\n  - Refreshes UI\n  "],"~$loading?",["^ ","^S",null,"^T",["^ ","^U","/Users/Nicole/projects/untangled-template-workspace/resources/public/js/cards/untangled/client/impl/data_fetch.cljs","^V",35,"^W",9,"^X",35,"^Y",17,"^Z",["^[",["^10",["^[",[["^11"]]]]],"^13","Test if the given item is a data state marker in the loading state"],"^9","~$untangled.client.impl.data-fetch/loading?","^15",false,"^U","resources/public/js/cards/untangled/client/impl/data_fetch.cljs","^Y",17,"^17",["^[",[["^11"]]],"^1:",null,"^18",["^[",[null,null]],"^W",3,"^V",35,"^X",35,"^16",1,"^1;",true,"^Z",["^[",["^10",["^[",[["^11"]]]]],"^13","Test if the given item is a data state marker in the loading state"],"~$data-field",["^ ","^S",null,"^T",["^ ","^U","/Users/Nicole/projects/untangled-template-workspace/resources/public/js/cards/untangled/client/impl/data_fetch.cljs","^V",260,"^W",7,"^X",260,"^Y",17,"^Z",["^[",["^10",["^[",[["^11"]]]]],"^13","Get the target field (if any) from the data state marker"],"^9","~$untangled.client.impl.data-fetch/data-field","^15",false,"^U","resources/public/js/cards/untangled/client/impl/data_fetch.cljs","^Y",17,"^17",["^[",[["^11"]]],"^1:",null,"^18",["^[",[null,null]],"^W",1,"^V",260,"^X",260,"^16",1,"^1;",true,"^Z",["^[",["^10",["^[",[["^11"]]]]],"^13","Get the target field (if any) from the data state marker"],"~$data-exclusions",["^ ","^S",null,"^T",["^ ","^U","/Users/Nicole/projects/untangled-template-workspace/resources/public/js/cards/untangled/client/impl/data_fetch.cljs","^V",293,"^W",7,"^X",293,"^Y",22,"^Z",["^[",["^10",["^[",[["^11"]]]]],"^13","Get the keywords that should be (recursively) removed from the query that will be sent to the server."],"^9","~$untangled.client.impl.data-fetch/data-exclusions","^15",false,"^U","resources/public/js/cards/untangled/client/impl/data_fetch.cljs","^Y",22,"^17",["^[",[["^11"]]],"^1:",null,"^18",["^[",[null,null]],"^W",1,"^V",293,"^X",293,"^16",1,"^1;",true,"^Z",["^[",["^10",["^[",[["^11"]]]]],"^13","Get the keywords that should be (recursively) removed from the query that will be sent to the server."],"~$data-refresh",["^ ","^S",null,"^T",["^ ","^U","/Users/Nicole/projects/untangled-template-workspace/resources/public/js/cards/untangled/client/impl/data_fetch.cljs","^V",269,"^W",7,"^X",269,"^Y",19,"^Z",["^[",["^10",["^[",[["^11"]]]]],"^13","Get the list of query keywords that should be refreshed (re-rendered) when this load completes."],"^9","~$untangled.client.impl.data-fetch/data-refresh","^15",false,"^U","resources/public/js/cards/untangled/client/impl/data_fetch.cljs","^Y",19,"^17",["^[",[["^11"]]],"^1:",null,"^18",["^[",[null,null]],"^W",1,"^V",269,"^X",269,"^16",1,"^1;",true,"^Z",["^[",["^10",["^[",[["^11"]]]]],"^13","Get the list of query keywords that should be refreshed (re-rendered) when this load completes."],"~$mark-ready",["^ ","^S",null,"^T",["^ ","^U","/Users/Nicole/projects/untangled-template-workspace/resources/public/js/cards/untangled/client/impl/data_fetch.cljs","^V",238,"^W",7,"^X",238,"^Y",17,"^Z",["^[",["^10",["^[",[[["^ ","^1K",["^11"],"^24","~$config"]]]]]],"^13","Place a ready-to-load marker into the application state. This should be done from\n  a mutate function that is abstractly loading something. This is intended for internal use.\n\n  See the `load-data` and `load-field` functions in `untangled.client.data-fetch` for the public API."],"^9","~$untangled.client.impl.data-fetch/mark-ready","^15",false,"^U","resources/public/js/cards/untangled/client/impl/data_fetch.cljs","^Y",17,"^17",["^[",[["~$p__36818"]]],"^1:",null,"^18",["^[",[null,null]],"^W",1,"^V",238,"^X",238,"^16",1,"^1;",true,"^Z",["^[",["^10",["^[",[[["^ ","^1K",["^11"],"^24","^2U"]]]]]],"^13","Place a ready-to-load marker into the application state. This should be done from\n  a mutate function that is abstractly loading something. This is intended for internal use.\n\n  See the `load-data` and `load-field` functions in `untangled.client.data-fetch` for the public API."],"~$data-query-key",["^ ","^S",null,"^T",["^ ","^U","/Users/Nicole/projects/untangled-template-workspace/resources/public/js/cards/untangled/client/impl/data_fetch.cljs","^V",272,"^W",7,"^X",272,"^Y",21,"^Z",["^[",["^10",["^[",[["^11"]]]]],"^13","Get the 'primary' query key of the data fetch. This is defined as the first keyword of the overall query (which might\n  be a simple prop or join key for example)"],"^9","~$untangled.client.impl.data-fetch/data-query-key","^15",false,"^U","resources/public/js/cards/untangled/client/impl/data_fetch.cljs","^Y",21,"^17",["^[",[["^11"]]],"^1:",null,"^18",["^[",[null,null]],"^W",1,"^V",272,"^X",272,"^16",1,"^1;",true,"^Z",["^[",["^10",["^[",[["^11"]]]]],"^13","Get the 'primary' query key of the data fetch. This is defined as the first keyword of the overall query (which might\n  be a simple prop or join key for example)"],"~$make-data-state",["^ ","^S",null,"^T",["^ ","^U","/Users/Nicole/projects/untangled-template-workspace/resources/public/js/cards/untangled/client/impl/data_fetch.cljs","^V",151,"^W",7,"^X",151,"^Y",22,"^Z",["^[",["^10",["^[",[["~$type"],["^2[","^12"]]]]],"^13","This is just a testing function -- using ready-state as public interface and call the\n  `set-{type}!` functions to change it as needed.","^14",["^ ","^15",false,"^16",2,"^17",["^[",[["^2["],["^2[","^12"]]],"^Z",["^[",[["^2["],["^2[","^12"]]],"^18",["^[",[null,null]]]],"^9","~$untangled.client.impl.data-fetch/make-data-state","^15",false,"^U","resources/public/js/cards/untangled/client/impl/data_fetch.cljs","^Y",22,"^14",["^ ","^15",false,"^16",2,"^17",["^[",[["^2["],["^2[","^12"]]],"^Z",["^[",[["^2["],["^2[","^12"]]],"^18",["^[",[null,null]]],"^17",["^[",[["^2["],["^2[","^12"]]],"^1:",null,"^18",["^[",[null,null]],"^W",1,"^V",151,"^X",151,"^16",2,"^1;",true,"^Z",["^[",[["^2["],["^2[","^12"]]],"^13","This is just a testing function -- using ready-state as public interface and call the\n  `set-{type}!` functions to change it as needed."],"~$get-ready-query",["^ ","^S",null,"^T",["^ ","^U","/Users/Nicole/projects/untangled-template-workspace/resources/public/js/cards/untangled/client/impl/data_fetch.cljs","^V",162,"^W",7,"^X",162,"^Y",22,"^Z",["^[",["^10",["^[",[["^11"]]]]],"^13","Get the query for items that are ready to load into the given app state. Can be called any number of times\n  (side effect free)."],"^9","~$untangled.client.impl.data-fetch/get-ready-query","^15",false,"^U","resources/public/js/cards/untangled/client/impl/data_fetch.cljs","^Y",22,"^17",["^[",[["^11"]]],"^1:",null,"^18",["^[",[null,null]],"^W",1,"^V",162,"^X",162,"^16",1,"^1;",true,"^Z",["^[",["^10",["^[",[["^11"]]]]],"^13","Get the query for items that are ready to load into the given app state. Can be called any number of times\n  (side effect free)."],"~$data-uuid",["^ ","^S",null,"^T",["^ ","^U","/Users/Nicole/projects/untangled-template-workspace/resources/public/js/cards/untangled/client/impl/data_fetch.cljs","^V",263,"^W",7,"^X",263,"^Y",16,"^Z",["^[",["^10",["^[",[["^11"]]]]],"^13","Get the UUID of the data fetch"],"^9","~$untangled.client.impl.data-fetch/data-uuid","^15",false,"^U","resources/public/js/cards/untangled/client/impl/data_fetch.cljs","^Y",16,"^17",["^[",[["^11"]]],"^1:",null,"^18",["^[",[null,null]],"^W",1,"^V",263,"^X",263,"^16",1,"^1;",true,"^Z",["^[",["^10",["^[",[["^11"]]]]],"^13","Get the UUID of the data fetch"],"~$set-ready!",["^ ","^S",null,"^T",["^ ","^U","/Users/Nicole/projects/untangled-template-workspace/resources/public/js/cards/untangled/client/impl/data_fetch.cljs","^V",301,"^W",9,"^X",301,"^Y",19,"^Z",["^[",["^10",["^[",[["^11"],["^11","^12"]]]]],"^13","Returns a state (based on the input state) that is in the 'ready' to load state.","^14",["^ ","^15",false,"^16",2,"^17",["^[",[["^11"],["^11","^12"]]],"^Z",["^[",[["^11"],["^11","^12"]]],"^18",["^[",[null,null]]]],"^9","~$untangled.client.impl.data-fetch/set-ready!","^15",false,"^U","resources/public/js/cards/untangled/client/impl/data_fetch.cljs","^Y",19,"^14",["^ ","^15",false,"^16",2,"^17",["^[",[["^11"],["^11","^12"]]],"^Z",["^[",[["^11"],["^11","^12"]]],"^18",["^[",[null,null]]],"^17",["^[",[["^11"],["^11","^12"]]],"^1:",null,"^18",["^[",[null,null]],"^W",3,"^V",301,"^X",301,"^16",2,"^1;",true,"^Z",["^[",[["^11"],["^11","^12"]]],"^13","Returns a state (based on the input state) that is in the 'ready' to load state."],"~$place-load-markers",["^ ","^S",null,"^T",["^ ","^U","/Users/Nicole/projects/untangled-template-workspace/resources/public/js/cards/untangled/client/impl/data_fetch.cljs","^V",42,"^W",8,"^X",42,"^Y",26,"^2J",true,"^Z",["^[",["^10",["^[",[["^2>","~$items-to-load"]]]]],"^13","Place load markers in the app state at their data paths so that UI rendering can see them."],"^2J",true,"^9","~$untangled.client.impl.data-fetch/place-load-markers","^15",false,"^U","resources/public/js/cards/untangled/client/impl/data_fetch.cljs","^Y",26,"^17",["^[",[["^2>","^38"]]],"^1:",null,"^18",["^[",[null,null]],"^W",1,"^V",42,"^X",42,"^16",2,"^1;",true,"^Z",["^[",["^10",["^[",[["^2>","^38"]]]]],"^13","Place load markers in the app state at their data paths so that UI rendering can see them."],"~$set-global-loading",["^ ","^S",null,"^T",["^ ","^U","/Users/Nicole/projects/untangled-template-workspace/resources/public/js/cards/untangled/client/impl/data_fetch.cljs","^V",320,"^W",8,"^X",320,"^Y",26,"^2J",true,"^Z",["^[",["^10",["^[",[["^1?"]]]]]],"^2J",true,"^9","~$untangled.client.impl.data-fetch/set-global-loading","^15",false,"^U","resources/public/js/cards/untangled/client/impl/data_fetch.cljs","^Y",26,"^17",["^[",[["^1?"]]],"^1:",null,"^18",["^[",[null,null]],"^W",1,"^V",320,"^X",320,"^16",1,"^1;",true,"^Z",["^[",["^10",["^[",[["^1?"]]]]]],"~$loaded-callback",["^ ","^S",null,"^T",["^ ","^U","/Users/Nicole/projects/untangled-template-workspace/resources/public/js/cards/untangled/client/impl/data_fetch.cljs","^V",343,"^W",8,"^X",343,"^Y",23,"^2J",true,"^Z",["^[",["^10",["^[",[["^1?"]]]]],"^13","Generates a callback that processes all of the post-processing steps once a remote load has completed. This includes:\n\n  - Marking the items that were queries for but not returned as 'missing' (see documentation on mark and sweep of db)\n  - Refreshing elements of the UI that were included in the data fetch :refresh option\n  - Removing loading markers related to the executed loads that were not overwritten by incoming data\n  - Merging the incoming data into the normalized database\n  - Running post-mutations for any fetches that completed\n  - Updating the global loading marker\n  - Forcing a global re-render if post-mutations ran (may change in future versions)\n  "],"^2J",true,"^9","~$untangled.client.impl.data-fetch/loaded-callback","^15",false,"^U","resources/public/js/cards/untangled/client/impl/data_fetch.cljs","^Y",23,"^17",["^[",[["^1?"]]],"^1:",null,"^18",["^[",[null,null]],"^W",1,"^V",343,"^X",343,"^16",1,"^1;",true,"^Z",["^[",["^10",["^[",[["^1?"]]]]],"^13","Generates a callback that processes all of the post-processing steps once a remote load has completed. This includes:\n\n  - Marking the items that were queries for but not returned as 'missing' (see documentation on mark and sweep of db)\n  - Refreshing elements of the UI that were included in the data fetch :refresh option\n  - Removing loading markers related to the executed loads that were not overwritten by incoming data\n  - Merging the incoming data into the normalized database\n  - Running post-mutations for any fetches that completed\n  - Updating the global loading marker\n  - Forcing a global re-render if post-mutations ran (may change in future versions)\n  "],"~$data-ident",["^ ","^S",null,"^T",["^ ","^U","/Users/Nicole/projects/untangled-template-workspace/resources/public/js/cards/untangled/client/impl/data_fetch.cljs","^V",250,"^W",7,"^X",250,"^Y",17,"^Z",["^[",["^10",["^[",[["^11"]]]]],"^13","Return the ident (if any) of the component related to the query in the data state marker. An ident is required\n  to be present if the marker is targeting a field."],"^9","~$untangled.client.impl.data-fetch/data-ident","^15",false,"^U","resources/public/js/cards/untangled/client/impl/data_fetch.cljs","^Y",17,"^17",["^[",[["^11"]]],"^1:",null,"^18",["^[",[null,null]],"^W",1,"^V",250,"^X",250,"^16",1,"^1;",true,"^Z",["^[",["^10",["^[",[["^11"]]]]],"^13","Return the ident (if any) of the component related to the query in the data state marker. An ident is required\n  to be present if the marker is targeting a field."],"~$data-query",["^ ","^S",null,"^T",["^ ","^U","/Users/Nicole/projects/untangled-template-workspace/resources/public/js/cards/untangled/client/impl/data_fetch.cljs","^V",254,"^W",7,"^X",254,"^Y",17,"^Z",["^[",["^10",["^[",[["^11"]]]]],"^13","Get the query that will be sent to the server as a result of the given data state marker"],"^9","~$untangled.client.impl.data-fetch/data-query","^15",false,"^U","resources/public/js/cards/untangled/client/impl/data_fetch.cljs","^Y",17,"^17",["^[",[["^11"]]],"^1:",null,"^18",["^[",[null,null]],"^W",1,"^V",254,"^X",254,"^16",1,"^1;",true,"^Z",["^[",["^10",["^[",[["^11"]]]]],"^13","Get the query that will be sent to the server as a result of the given data state marker"],"~$data-params",["^ ","^S",null,"^T",["^ ","^U","/Users/Nicole/projects/untangled-template-workspace/resources/public/js/cards/untangled/client/impl/data_fetch.cljs","^V",289,"^W",7,"^X",289,"^Y",18,"^Z",["^[",["^10",["^[",[["^11"]]]]],"^13","Get the parameters that the user wants to add to the first join/keyword of the data fetch query."],"^9","~$untangled.client.impl.data-fetch/data-params","^15",false,"^U","resources/public/js/cards/untangled/client/impl/data_fetch.cljs","^Y",18,"^17",["^[",[["^11"]]],"^1:",null,"^18",["^[",[null,null]],"^W",1,"^V",289,"^X",289,"^16",1,"^1;",true,"^Z",["^[",["^10",["^[",[["^11"]]]]],"^13","Get the parameters that the user wants to add to the first join/keyword of the data fetch query."],"~$join-key-or-nil",["^ ","^S",null,"^T",["^ ","^U","/Users/Nicole/projects/untangled-template-workspace/resources/public/js/cards/untangled/client/impl/data_fetch.cljs","^V",100,"^W",7,"^X",100,"^Y",22,"^Z",["^[",["^10",["^[",[["~$expr"]]]]]],"^9","~$untangled.client.impl.data-fetch/join-key-or-nil","^15",false,"^U","resources/public/js/cards/untangled/client/impl/data_fetch.cljs","^Y",22,"^17",["^[",[["^3E"]]],"^1:",null,"^18",["^[",[null,null]],"^W",1,"^V",100,"^X",100,"^16",1,"^1;",true,"^Z",["^[",["^10",["^[",[["^3E"]]]]]],"~$valid-types",["^ ","^9","~$untangled.client.impl.data-fetch/valid-types","^U","resources/public/js/cards/untangled/client/impl/data_fetch.cljs","^V",149,"^W",1,"^X",149,"^Y",17,"^T",["^ ","^U","/Users/Nicole/projects/untangled-template-workspace/resources/public/js/cards/untangled/client/impl/data_fetch.cljs","^V",149,"^W",6,"^X",149,"^Y",17]],"~$full-query",["^ ","^S",null,"^T",["^ ","^U","/Users/Nicole/projects/untangled-template-workspace/resources/public/js/cards/untangled/client/impl/data_fetch.cljs","^V",316,"^W",7,"^X",316,"^Y",17,"^Z",["^[",["^10",["^[",[["^2?"]]]]],"^13","Composes together the queries of a sequence of data states into a single query."],"^9","~$untangled.client.impl.data-fetch/full-query","^15",false,"^U","resources/public/js/cards/untangled/client/impl/data_fetch.cljs","^Y",17,"^17",["^[",[["^2?"]]],"^1:",null,"^18",["^[",[null,null]],"^W",1,"^V",316,"^X",316,"^16",1,"^1;",true,"^Z",["^[",["^10",["^[",[["^2?"]]]]],"^13","Composes together the queries of a sequence of data states into a single query."]],"~:require-macros",["^ ","^4","^4","^N","^O","^O","^O"],"~:cljs.analyzer/constants",["^ ","~:seen",["^8",["~:ui/react-key","~:children","~:union-key","~:untangled.client.impl.data-fetch/post-mutation","~:ready","~:untangled.client.impl.data-fetch/parallel","~:untangled.client.impl.data-fetch/marker","~:key","~:refresh","~:callback-args","~:ui/fetch-state","~:parallel","~:fallback","~:marker","~:on-load","~:params","~:field","~:untangled.client.impl.data-fetch/without","~:state","~:post-mutation","~:otherwise","~:untangled.client.impl.data-fetch/params","~:without","~:untangled.client.impl.data-fetch/type","~:untangled.client.impl.data-fetch/ident","~:untangled/server-error","~:loading","~:untangled.client.impl.data-fetch/post-mutation-params","~:untangled.client.impl.data-fetch/fallback","~:ident","~:dispatch-key","~:untangled.client.impl.data-fetch/query","~:untangled/force-root","~:untangled/loads-in-progress","~:post-mutation-params","~:om.next/ready-to-load","~:action","~:untangled.client.impl.data-fetch/field","~:error","~:ui/loading-data","~:untangled.client.impl.data-fetch/refresh","~:target","~:on-error","~:query","~:items-to-load","~:untangled.client.impl.data-fetch/target","~:untangled.client.impl.data-fetch/uuid","~:always","~:failed"]],"~:order",["^49","^3R","^4<","^4R","^3X","^4C","^4E","^3S","^4I","^4M","^40","^4L","^3W","^47","^4N","^3U","^3P","^3O","^4@","^41","^4K","^3V","^3Y","^3Z","^3[","^42","^45","^48","^4?","^4D","^3Q","^3T","^4:","^4=","^4>","^4A","^4G","^4J","^4O","^4P","^44","^46","^43","^4Q","^4F","^4B","^4;","^4H","^3N"]],"^13",null]